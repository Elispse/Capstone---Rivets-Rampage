//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Input/IA_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_Controls"",
    ""maps"": [
        {
            ""name"": ""Input Controls"",
            ""id"": ""2650ec86-e642-413d-9a8a-c132fd36c00a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b87b8758-7cb0-41f0-ac2a-4b220095378b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Value"",
                    ""id"": ""d2c7df86-f69c-4519-a06c-a1c8051297b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""6f2b3464-09fc-448e-9e27-d5e27a06f2ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""52f88e0f-56d2-40a9-b60c-a30f311ac16c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7b5fe91f-a876-464d-bf73-04c0ac70fced"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5e60936d-f801-48b2-9659-72c22bfbce5e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""96426816-454d-45d3-882a-f1278fd1c74a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9a16d070-6545-4bbc-b4da-fb530299be74"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8e8d0e4f-5c34-4b10-a292-ffe0a92fedbd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88e790a8-1323-44b5-85ae-213c4e2a1233"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input Controls
        m_InputControls = asset.FindActionMap("Input Controls", throwIfNotFound: true);
        m_InputControls_Movement = m_InputControls.FindAction("Movement", throwIfNotFound: true);
        m_InputControls_Shoot = m_InputControls.FindAction("Shoot", throwIfNotFound: true);
        m_InputControls_MousePosition = m_InputControls.FindAction("MousePosition", throwIfNotFound: true);
    }

    ~@IA_Controls()
    {
        UnityEngine.Debug.Assert(!m_InputControls.enabled, "This will cause a leak and performance issues, IA_Controls.InputControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input Controls
    private readonly InputActionMap m_InputControls;
    private List<IInputControlsActions> m_InputControlsActionsCallbackInterfaces = new List<IInputControlsActions>();
    private readonly InputAction m_InputControls_Movement;
    private readonly InputAction m_InputControls_Shoot;
    private readonly InputAction m_InputControls_MousePosition;
    public struct InputControlsActions
    {
        private @IA_Controls m_Wrapper;
        public InputControlsActions(@IA_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputControls_Movement;
        public InputAction @Shoot => m_Wrapper.m_InputControls_Shoot;
        public InputAction @MousePosition => m_Wrapper.m_InputControls_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_InputControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputControlsActions set) { return set.Get(); }
        public void AddCallbacks(IInputControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_InputControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IInputControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IInputControlsActions instance)
        {
            if (m_Wrapper.m_InputControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_InputControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputControlsActions @InputControls => new InputControlsActions(this);
    public interface IInputControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
